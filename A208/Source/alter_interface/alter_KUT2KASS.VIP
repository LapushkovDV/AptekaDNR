#component "L_Kassa"
#include FRRecordDefinition.vih
/*
VipInterface KUT2KASSA SourceFile = "KUT2KASSA.vip"
Licensed
(
free
)
;
*/
alter interface KUT2KASSA;


// временная таблица для выгрузки в JSON
table struct local _tmpJSON
(
  LOC        :string,
  GALLOCAL   :string(30),
  BARKOD     :string,
  Price      :double,
  COUNT      :double,
  NAM        :string,
  VES        :word,
  ED         :string(5),
  EDMSG      :string(50),
  DEP        :string(4),
  KOEF       :double,
  SALE       :word,
  FPRICE     :double,
  GROUP      :string,
  MIN        :double,
  MAX        :double,
  REMMC      :string(50),
  NREC       :string(30),
  ZAKUP      :double,
  PLANVOL    :double,
  TNVED      :string(20),
  OKDP       :string(20),
  nKassa     :string
)
with index
(
  by_nKassa = nKassa+NAM
);

// Для проверки результатов работы хранимой процедуры SQL

// Временная таблица для хранения хэндлов DBF для каждого ТЗ (при обмене через файлы)
// и
// кроме того, в таблицу записывается состояние linked сервера
// с которым выполняется обмен. Как только в первый раз сервер вернул ошибку
// весь сеанс обмена данными с этим сервером считается проваленным
// так сделано для того, чтобы не ожидать ответа от сервера по каждой МЦ
table struct local _tmpDBF
(
  nKassa      :string(20),
  PodrName    :string(255),
  hh_dbf      :longint,
  Path        :string(255),
  SRV_Status  :boolean,
  SP_Err      :word,
  SRV_addr    :string(255),
  mode        :word,
  PathJSON    :string(255)
)
with index
(
  by_nKassa    = nKassa
);

// Временная таблица для хранения протокола ошибок при передаче в ТЗ
table struct local _tmpErr
(
  nKassa      :string(255),
  PodrName    :string(255),
  Err         :string(255),
  BARCODE     :string(20),
  NameMC      :string(255),
  Party       :string(255),
  EdIzm       :string(20),
  Kol         :double,
  Price       :double
)
with index
(
  by_nKassa    = nKassa+PodrName
);

//Временная таблица для хранения товаров (для отчета EKKA)
table struct _tmpReport
(
  rArticul   	  : string(20),
  rNameMC      	: string[80],
  rNameGR    	  : string[80],
  rNameDoc    	: string[40],
  rNoDoc      	: string[20],
  rDDoc        	: date,
  rUedPrice    	: double,
  rUedFPrice 	  : double,
  rUedKol      	: double,
  rUedName     	: string[20],
  rKoef        	: double,
  rOedPrice  	  : double,
  rOedFPrice    : double,
  rOedKol       : double,
  rOedName     	: string[20],
  rAction     	: string[30],
  rPlace       	: string[15],
  rUedPOSPrice	: double,
  rOedPOSPrice	: double,
  TypePrih      : word,
  cSopr         : comp,

  OtpInPodr     : String[255]
)
with index
(
  ARep01    = rDDoc+rNoDoc+rNameMC,
  by_cDoc    = TypePrih + cSopr + rDDoc
);

//Временная таблица для хранения реквизитов документов (для EKKA)
table struct _tmpReportDoc
(
  rNameDoc    	: string[40],
  rNoDoc      	: string[20],
  rDDoc        	: date,
  TypePrih      : word,
  cSopr         : comp
)
with index
(
  ARep01    = rDDoc+rNoDoc,
  by_cDoc    = TypePrih + cSopr + rDDoc
);


Create view
var
  nRecPLPos     :comp;
  _modeOb       :word;
  m_service     :TPtr;
  _cPodrFlt     :comp;
  TotalSel      :double;   //-- Выбрано на сумму
  TotalKol      :LongInt;  //-- Выбрано строк
  _FormatExch   :word;
as select
  if(isValid(tnKatOtpEdMin), KatOtpEdMin.koef, 1) (fieldName OEKoefDel),


/*
// Тип приходов
  FROM_ORG      = 901; // Приход от поставщика (также применяется как тип расхода при созданиии
                       //                       ручных расходов в интерфейсе кут по мц)
  FROM_PODR     = 902; // Приход с оптового склада
  FROM_PEREO    = 903; // Дооценка (приходы и расходы)
  FROM_INVENT   = 904; // Инвентаризация излишков (приходы и расходы)
  FROM_KASSA    = 905; // пришло из кассы
  FROM_NAR      = 906; // пришло от покупателя в текущюю смену
  FROM_NAROD    = 907; // пришло от покупателя после закрытия смены
  FROM_TO_OTDEL = 908; // Внутрирозничное перемещение (приходы и расходы)
*/
  if( rzKutPrih.TypePrih = FROM_ORG or rzKutPrih.TypePrih = FROM_PODR
      ,KatSopr.NSopr
      ,if(rzKutPrih.TypePrih = 0,rzKutPrih.Nomer, rzDoc.NDoc)
    ) (fieldName NomDoc),

  if(rzKutPrih.TypePrih =  901  ,'Приход от поставщика' ,          // Приход от поставщика
  if(rzKutPrih.TypePrih =  902  ,'Приход со склада' ,              // Приход со склада
  if(rzKutPrih.TypePrih =  903  ,'Дооценка',                       // пришло с Переоценки (Дооценка)
  if(rzKutPrih.TypePrih =  904  ,'Инвентаризация излишков',        // пришло с Инвентаризации   (перестаток)
  if(rzKutPrih.TypePrih =  905  ,'Приход из кассы' ,               // пришло из кассы
  if(rzKutPrih.TypePrih =  906  ,'Возврат от пукупателя в текущую смену',      // пришло от покупателя в текущюю смену
  if(rzKutPrih.TypePrih =  907  ,'Возврат от покупателя после закрытия смены', // пришло от покупателя в другие смене
  if(rzKutPrih.TypePrih =  908  ,'Внутреннее перемещение',         // пришло от отдела Внутрирозничного перемещение
  if(rzKutPrih.TypePrih =  910  ,'Стоимостная инвентаризация',     // недостача при стоимостной инвентаризации
  if(rzKutPrih.TypePrih =  911  ,'Возврат поставщику' ,            // Отправили поставщику
  if(rzKutPrih.TypePrih =  912  ,'Возврат на оптовый склад' ,      // Отправили на склад
  if(rzKutPrih.TypePrih =  913  ,'Уценка',                         // отправили на Переоценку  (Уценка)
  if(rzKutPrih.TypePrih =  914  ,'Инвентаризация недостачи',       // отправили на Инвентаризацию (недостаток)
  if(rzKutPrih.TypePrih =  915  ,'Передача в кассу' ,              // отправили в кассы
  if(rzKutPrih.TypePrih =  919  ,'Реализация покупателю' ,         // продали покупателю
  if(rzKutPrih.TypePrih =  917  ,'По акту о списании товара' ,     // списание
  if(rzKutPrih.TypePrih =  918  ,'Продажа покупателю через кассы', // продали покупателю через кассы
  if(rzKutPrih.TypePrih =  919  ,'Продажа покупателю через кассы', // продали покупателю через кассы
                                'Ввод остатков')
      ))))) ))))) ))))) ))   (fieldName TypePrih),
/*
//---- приход в учетных единицах
//---- (остаток, роз.цена, учт.цена, прайс.цена, признак делимости)
  rzKutPrih.Ostatok * if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) (fieldName UEdKol),            // UEdKol
  rzKutPrih.rPrice  / if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) (fieldName UEdRPrice),         // UEdRPrice
  rzKutPrih.Price   / if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) (fieldName UEdPrice),          // UEdPrice
  rzKutPrih.FPrice  / if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) (fieldName UEdFPrice),         // UEdFPrice
  PricesPOS.Price   / if(isValid(tnKatOtpEdPOS), KatOtpEdPOS.koef, 1) (fieldName UEdPOSPrice),  // UEdPOSPrice
  KatEd.Diskret (fieldName UEisDel),                                                            // UEisDel
  if(isValid(tnKatOtpEd), KatOtpEd.koef, 1) (fieldName PRKoefDel),                              // PRKoefDel

*/
//---- приход в минимальных отпускных единицах
//---- (остаток, роз.цена, учт.цена, признак делимости, коеф.делимости уч.ед.)
  round(rzKutPrih.Ostatok * if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) / if(isValid(tnKatOtpEdMin),KatOtpEdMin.koef,1))         (fieldName OEdKol),        // OEdKol
  round(AttrValP.vDouble * if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) / if(isValid(tnKatOtpEdMin),KatOtpEdMin.koef,1))          (fieldName OEdKol_2),      // OEdKol_2

  round(rzKutPrih.rPrice  / if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) * if(isValid(tnKatOtpEdMin),KatOtpEdMin.koef,1),2)       (fieldName OEdRPrice),     // OEdRPrice
  round(rzKutPrih.pPrice  / if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) * if(isValid(tnKatOtpEdMin),KatOtpEdMin.koef,1),2)       (fieldName OEdPPrice),     // OEdPPrice
  round(rzKutPrih.vPrice  / if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) * if(isValid(tnKatOtpEdMin),KatOtpEdMin.koef,1),2)       (fieldName OEdVPrice),     // OEdVPrice
  round(rzKutPrih.Price   / if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) * if(isValid(tnKatOtpEdMin),KatOtpEdMin.koef,1),2)       (fieldName OEdPrice),      // OEdPrice
  round(rzKutPrih.FPrice  / if(isValid(tnKatOtpEd),  KatOtpEd.koef, 1) * if(isValid(tnKatOtpEdMin),KatOtpEdMin.koef,1),2)       (fieldName OEdFPrice),     // OEdFPrice
  round(PricesPOS.Price   / if(isValid(tnKatOtpEdPOS), KatOtpEdPOS.koef, 1) * if(isValid(tnKatOtpEdMin),KatOtpEdMin.koef,1),2)  (fieldName OEdPOSPrice),   // OEdPOSPrice
  (KatOtpEdMin.Diskret) (fieldName OEisDel),                                                      // OEisDel
//  (KatOtpEdMin.Koef)    (fieldName OEKoefDel),                                                    // OEKoefDel

  'Розн торговля (РОЗНИЧНЫЕ ЦЕНЫ)' (fieldName NamePLBase),                                      // NamePLBase
  'Розн торговля (Цены для POS-терминалов)' (fieldName NamePLPos),                              // NamePLPos
*
from
  _tmpDBF
 ,_tmpErr
 ,_tmpReport
 ,_tmpReportDoc

 ,_tmpDBF         _tmpDBF_Del
 ,_tmpErr         _tmpErr_Del
 ,_tmpReport      _tmpReport_Del
 ,_tmpReportDoc   _tmpReportDoc_Del

 ,_tmpJSON

 ,KatOtpEd KatOtpEdMin(KATOTPED08)
 ,GroupMC
 ,KlPrice	KlPricePOS
 ,Prices PricesPOS
 ,KatOtpEd KatOtpEdPOS
 ,GrNal

 ,Pick Pick_Del
 ,ATC_exch_log
 ,Synonym attrnam	AttrNamN
 ,Synonym attrval	AttrValN
 ,KatPodr KatPodr_FLT

 ,(select Sum(_rz.rPrice*if(_ap.VDOUBLE<>0,_ap.VDOUBLE,_rz.Ostatok)) (fieldname= _TotalSel),
          count(*)        (fieldname= _TotalKol)
   from Pick _p, rzKUTPrih _rz, AttrNam _an, AttrVal _ap
   where ((
               word(555)   == _p.wList
           and _p.cRec     == _rz.nRec
           and  coRzKutPrih            == _an.wTable     // для количества отпуска
           and  'Количество для ТЗ'    == _an.Name
           and  coRzKutPrih            == _ap.wTable
           and  _rz.nRec               == _ap.cRec
           and  _an.nRec               == _ap.cAttrNam

         ))
  )

where((
//=============================================
    1                    == KatOtpEdMin.PRMC
and rzKutPrih.cMc        == KatOtpEdMin.CMCUSL
and KatMC.cGroupMC       == GroupMC.nRec

and KatMc.cGrNal         == GrNal.nRec

and rzKutPrih.cSopr      == KatSopr.nRec               // приход от поставщика
and rzKutPrih.cSopr      == rzDoc.nRec                 // приход по документам розницы
and nRecPLPos            == PricesPOS.cKlPrice
and rzKutPrih.cMc        == PricesPOS.cThing

and PricesPOS.cOtped     == KatOtpEdPOS.nRec
//=============================================
and _tmpReportDoc.TypePrih  == _tmpReport.TypePrih
and _tmpReportDoc.cSopr     == _tmpReport.cSopr


//---- внешний атрибут: "Артикул"
and 1411              == AttrNam.wTable
and 'Артикул'         == AttrNam.Name
and 1411              == AttrVal.wTable
and KatMC.nRec        == AttrVal.cRec
and AttrNam.nRec      == AttrVal.cAttrNam
//---- внешний атрибут: "Наименование для чека"
and 1411              == AttrNamN.wTable
and 'В чеке'          == AttrNamN.Name
and 1411              == AttrValN.wTable
and KatMC.nRec        == AttrValN.cRec
and AttrNamN.nRec     == AttrValN.cAttrNam

and _cPodrFlt         == KatPodr_FLT.nRec


));

sql query sql_Exec_SendTovar_To_TorgZal =
SENDTOVAR_TO_TORGZAL (:ARTCODE,:MNAME,:PACK,:PNAME,:PUNU,:PTAX,:PNREC,:MIN_K,:MAX_K,:REMMC,:PRICE,:QTY,:QTYU,:KOEF,:OKDP,:TNVED,:SRV_NAME,:DB_NAME,:MODE)
;


Procedure _ReDraw;
{
  if GetFirst Pick_Del where ((word(555) ==  Pick_Del.wList)) = tsOk
     {
       verify (_TotalSel);
       verify (_TotalKol);
       SET TotalSel := _TotalSel;
       SET TotalKol := _TotalKol;
     } else
     {
       SET TotalSel := 0;
       SET TotalKol := 0;
     }
  RescanPanel(#Pick);
}

// окно параметров обмена данными
// вызывается при обмене и по умолчанию настроено на обмен через SQL
// для обмена через DBF нужно ручками, целенаправленно, выбрать DBF
// сделано для уменьшения вероятности ошибки выбора типа обмена
Window winParamOb 'Параметры обмена данными' cyan, doAccept;
Show at (,,36,6);
Screen Scr_Prior 'Параметры обмена данными' ('Параметры обмена данными',  , sci1Esc);
Fields
  _modeOb  :noProtect;
Buttons
  cmOk,,,         'Выполнить',   , scGalDial;
  cmCancel,,,     'Отмена',   , scGalDial;
<<

  `Выполнить обмен данными: `
    (.) SQL (онлайн режим)`
    (.) обмен файлами`

      <.  Выполнить  .><.  Отмена  .>
>>
end;

HandleEvent
cmInit:{
  SET _modeOb := 0;
}
cmOk:{
  CloseInterface(cmDefault);
}
end;
end; // window


function ExportJSON :boolean;
{
  _loop _tmpDBF
  {
    result := false;
    m_service := HttpConnect_CreateEx('http://ya.ru', '', '', true);
// OleGenerateGUID

    var JSONObj_Descriptions : TPtr = HttpConnect_JsonObjectCreate(m_service);
    var JSONObj_Array : TPtr = 0;
    JSONObj_Array := HttpConnect_JsonArrayCreate(m_service);

    _loop _tmpJSON where ((_tmpDBF.nKassa == _tmpJSON.nKassa))
       {
         nextVisual;
         var JSONObj_VALUES: TPtr = HttpConnect_JsonObjectCreate(m_service);

         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'LOC'      ,_tmpJSON.LOC     );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'GALLOCAL' ,_tmpJSON.GALLOCAL);
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'BARKOD'   ,_tmpJSON.BARKOD  );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'PRICE'    ,_tmpJSON.Price   );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'COUNT'    ,_tmpJSON.COUNT   );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'NAM'      ,_tmpJSON.NAM     );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'VES'      ,_tmpJSON.VES     );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'ED'       ,_tmpJSON.ED      );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'EDMSG'    ,_tmpJSON.EDMSG   );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'DEP'      ,_tmpJSON.DEP     );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'KOEF'     ,DoubleToStr(_tmpJSON.KOEF,'[|-]3666.88888888'));
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'SALE'     ,_tmpJSON.SALE    );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'FPRICE'   ,_tmpJSON.FPRICE  );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'GROUP'    ,_tmpJSON.GROUP   );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'MIN'      ,_tmpJSON.MIN     );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'MAX'      ,_tmpJSON.MAX     );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'REMMC'    ,_tmpJSON.REMMC   );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'NREC'     ,_tmpJSON.NREC    );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'ZAKUP'    ,_tmpJSON.ZAKUP   );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'PLANVOL'  ,_tmpJSON.PLANVOL );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'TNVED'    ,_tmpJSON.TNVED   );
         HttpConnect_JsonObjectAddString (m_service, JSONObj_VALUES, 'OKDP'     ,_tmpJSON.OKDP    );

         HttpConnect_JsonArrayAddObject(m_service, JSONObj_Array, JSONObj_VALUES);
       }
    HttpConnect_JsonObjectAddObject(m_service, JSONObj_Descriptions, _tmpDBF.nKassa, JSONObj_Array);
    var JSONSJSON     :TPtr = HttpConnect_JSONObjectToJSON(m_service,JSONObj_Descriptions);
    if HttpConnect_SaveToFileEx(m_service, JSONSJSON, _tmpDBF.PathJSON, 1251, false) //cpUTF8
       {
         result := true;
       };

    HttpConnect_JSONObjectDestroy(m_service,JSONObj_Descriptions);
    HttpConnect_JSONObjectDestroy(m_service,JSONObj_Array);
    HttpConnect_Free(m_service);
/*
    var _path_sql:string = Replace(_tmpDBF.PathJSON,'json','sql');
    var _st      :string = 'USE [new]';
    LogStrToFile(_path_sql, _st);
    SET _st := 'GO';
    LogStrToFile(_path_sql, _st);
    SET _st := 'EXEC	[dbo].[LOAD_FROM_JSON]';
    LogStrToFile(_path_sql, _st);
    SET _st := '		@PODR_NAME = N'''+_tmpDBF.nKassa+''',';
    LogStrToFile(_path_sql, _st);
    SET _st := '		@JSON_PATH = N'''+_tmpDBF.PathJSON+''' ';
    LogStrToFile(_path_sql, _st);
    SET _st := 'GO';
    LogStrToFile(_path_sql, _st);
*/
  }
}


// заполнение временных таблиц (шапка и спецификация) для отчета "Отчет о передаче в ЕККА"
procedure Insert_for_Report_EKKA(BarCode: string[20]);
{
//   if GetFirst _tmpReportDoc where ((NomDoc == _tmpReportDoc.rNoDoc and rzKutPrih.DDoc == _tmpReportDoc.rDDoc)) <> tsOk
   if GetFirst _tmpReportDoc where ((rzKutPrih.TypePrih == _tmpReportDoc.TypePrih and rzKutPrih.cSopr == _tmpReportDoc.cSopr)) <> tsOk
      {
        ClearBuffer(#_tmpReportDoc);
        _tmpReportDoc.rNameDoc := TypePrih;
        _tmpReportDoc.rNoDoc   := NomDoc;
        _tmpReportDoc.rDDoc    := rzKutPrih.DDoc;
        _tmpReportDoc.TypePrih := rzKutPrih.TypePrih;
        _tmpReportDoc.cSopr    := rzKutPrih.cSopr;
        insert current _tmpReportDoc;
      }
   ClearBuffer(#_tmpReport);

   _tmpReport.TypePrih    := rzKutPrih.TypePrih;
   _tmpReport.cSopr       := rzKutPrih.cSopr;

   _tmpReport.rArticul   	:= BarCode;
   _tmpReport.rNameMC    	:= KatMC.Name;
   _tmpReport.rNameGR    	:= substr(GroupMC.Name,1,InStr('|',GroupMC.Name)-1);
   _tmpReport.rNameDoc   	:= TypePrih;
   _tmpReport.rNoDoc     	:= NomDoc;
   _tmpReport.rDDoc      	:= rzKutPrih.DDoc;
   _tmpReport.rUedPrice  	:= ListGood.Price; //round(UEdRPrice,2);
   _tmpReport.rUedKol    	:= rzKUTRASH.Kol

//   _tmpReport.rUedFPrice   := if(isFPrice,round(UEdFPrice,2),0);
//   _tmpReport.rUedKol    	:= UEdKol;
   _tmpReport.rUedName   	:= KatEd.Name;
//   _tmpReport.rKoef      	:= OEKoefDel;
//   _tmpReport.rOedPrice  	:= round(OEdRPrice,2);
///   _tmpReport.rOedFPrice 	:= if(isFPrice,round(OEdFPrice,2),0);
//   _tmpReport.rOedKol    	:= OEdKol;
   _tmpReport.rOedName   	:= KatOtpEdMin.Name;
//   _tmpReport.rPlace		    := Katmc.REMMC;
//   _tmpReport.rAction    	:= ArtMsg,
//   _tmpReport.rUedPOSPrice	:= if(isValid(tnPricesPOS),UEdPOSPrice,0),
//   _tmpReport.rOedPOSPrice	:= if(isValid(tnPricesPOS),OEdPOSPrice,0);

   _tmpReport.OtpInPodr   := KatPodr.Name;

   insert current _tmpReport;
}

function _DoOperation_A208(_mode:word) : boolean; forward;


//Стрим для FR-отчета "Отчет о передаче товара на ЕККА"
//и Протокол ошибок (при передаче в ТЗ)
datastream StreamReport
(
  [CFH] CommonFormHeader;
  Table _tmpErr(
        [nKassa]    _tmpErr.nKassa;
        [PodrName]  _tmpErr.PodrName;
        [Err]       _tmpErr.Err;
        [BARCODE]   _tmpErr.BARCODE;
        [NameMC]    _tmpErr.NameMC;
        [Party]     _tmpErr.Party;
        [EdIzm]     _tmpErr.EdIzm;
        [Kol]       _tmpErr.Kol;
        [Price]     _tmpErr.Price;
  );
  Table _tmpDBF(
        [nKassa]    _tmpDBF.nKassa;
        [Path]      _tmpDBF.Path+''+_tmpDBF.SRV_addr;
        [PodrName]  _tmpDBF.PodrName;
        [myHeader]  if(_tmpDBF.mode = 111 ,('Файл для '+_tmpDBF.nKassa + ' ('+_tmpDBF.PodrName+') сохранен в папке') ,'Выполнялся обмен данными с ' );
  );

  Table _tmpReportDoc(

        [NameDoc]  _tmpReportDoc.rNameDoc;
        [NoDoc]    _tmpReportDoc.rNoDoc;
        [DDoc]     _tmpReportDoc.rDDoc;

        Table _tmpReport(
        [BarCode]   _tmpReport.rArticul;
        [NameMC]    _tmpReport.rNameMC;
        [NameGR]    _tmpReport.rNameGR;
        [Sklad]     '';
        [Price]     _tmpReport.rUedPrice;
        [Kol]       _tmpReport.rUedKol;
        [Summ]      _tmpReport.rUedPrice * _tmpReport.rUedKol;
        [OtpInPodr] _tmpReport.OtpInPodr;
        [EdIzm]     _tmpReport.rUedName+if(_tmpReport.rOedName<>'',' / '+_tmpReport.rOedName,'');
        );
  );
)
end;

//Добавление наших кнопок в интерфейс (родную скроем в cmInit)
ExtendFormats BeforeSummer;
screen BeforeSummer;
show at (,29,,);
table Pick;
  Fields
    KatPodr_FLT.Name ('Текущее подразделение. Выбирается по <F3>', , sci13Esc), Protect;
    TotalSel : [10,'\2P[|-]3666`666`666`666.88']         , protect;
    TotalKol : [10,'\2P[|-]3666`666`666`666']            , skip,{font={bold=true}};
  Buttons
    cmOk2 , , , 'Передать товар в торговый зал', , sci1Esc;
<<
                                                               <.Передать товар в Торговый зал.>
 .@@@@@@@@@@@@@@@@@@@@@@ `Сумма`.@@@@@@@@@@@@@@ `строк`.@@@@@@
>>
end;

//---------------- Получить описание отпускных ед.
function GetOtpEdStr: string;
{ GetOtpEdStr := trim(KatEd.Name)+'='+
                 DoubleToStr(1/OEKoefDel,'7777.8888')+'*'+
                 trim(KatOtpEdMin.Name)
}

//формирование протокола ошибок
function _MakeErrProtocol(_nKassa:string; _Err:string) : boolean;
{
  result := false;
  ClearBuffer(#_tmpErr);
  _tmpErr.nKassa   := _nKassa;
  _tmpErr.PodrName := KatPodr.Name;
  _tmpErr.Err      := _Err;
  _tmpErr.BARCODE  := rzKutPrih.Barcode;
  _tmpErr.NameMC   := KatMC.Name;
  _tmpErr.Party    := KatParty.Name;
  _tmpErr.EdIzm    := WordNameEd;
  _tmpErr.Kol      := rzKutPrih.Kol
  _tmpErr.Price    := rzKutPrih.pPrice;
  if insert current _tmpErr = tsOk then result := true;
}

function _SetSrvStatus(_SRV_Status:boolean; _sql_result:integer) : boolean;
{
  result := false;
  if GetFirst _tmpDBF where ((KatKassa.nKassa == _tmpDBF.nKassa)) <> tsOk
     {
       ClearBuffer(#_tmpDBF);
       _tmpDBF.nKassa     := KatKassa.nKassa;
       _tmpDBF.PodrName   := KatPodr3.Name;
       _tmpDBF.SRV_Status := _SRV_Status;
       _tmpDBF.SP_Err     := _sql_result;
       _tmpDBF.SRV_addr   := KatKassa.AddInfo;
       _tmpDBF.mode       := 222;
       if insert current _tmpDBF = tsOk result := true;
     } else
     {
       _tmpDBF.SRV_Status := _SRV_Status;
       if update current _tmpDBF = tsOk result := true;
     }
}

//генерация DBF, его структуры и хэндла для каждого ТЗ, в которые передается информация при офлайн обмене
function _GetDBF_hh(_nKassa:string) : longint;
{
  result := 0;
  if GetFirst _tmpDBF where ((_nKassa == _tmpDBF.nKassa)) <> tsOk
     {
       var _Path:string = '';
       var _PathJSON:string = '';
       if KATKASSA.LOCATIONOUT <> '' and ExistFile(KATKASSA.LOCATIONOUT)
          {
            _Path:= KATKASSA.LOCATIONOUT;
            _PathJSON:= KATKASSA.LOCATIONOUT;
          } else
          {
            _Path:= GetStringParameter('Files','OutputFilesDirectory',0);
            _PathJSON:= GetStringParameter('Files','OutputFilesDirectory',0);
          }
       _Path:= _Path + '\' + KATKASSA.NKASSA + '_' + DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS')+'.dbf';
       _Path := replace(_Path,'\\','\');

       _PathJSON := _PathJSON + '\' + KATKASSA.NKASSA + '_' + DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS')+'.json';
       _PathJSON := replace(_PathJSON,'\\','\');

       ClearBuffer(#_tmpDBF);
       _tmpDBF.nKassa     := KatKassa.nKassa;
       if _FormatExch = 0 //DBF
          {
            _tmpDBF.hh_dbf     := DBFOpen(_Path, stCreate);
          }
       _tmpDBF.Path       := _Path;
       _tmpDBF.PathJSON   := _PathJSON;
       _tmpDBF.PodrName   := KatPodr3.Name;
       _tmpDBF.SRV_Status := true;
       _tmpDBF.mode       := 111;
       insert current _tmpDBF;

       if _FormatExch = 0 //DBF
          {
            DBFAddField(_tmpDBF.hh_dbf,'LOC', dbChar, 20 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'GALLOCAL', dbNum, 19 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'BARKOD', DbChar, 14 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'COUNT', dbNum, 9, 3);
            DBFAddField(_tmpDBF.hh_dbf,'NAM', dbChar, 255 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'VES', dbNum, 4 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'ED', dbChar, 5 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'EDMSG', dbChar, 50 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'DEP', DbNum,  4, 0);
            DBFAddField(_tmpDBF.hh_dbf,'KOEF', DbNum,  4, 3);
            DBFAddField(_tmpDBF.hh_dbf,'SALE', DbNum,  4, 0);
            DBFAddField(_tmpDBF.hh_dbf,'FPRICE', DbNum,  16, 8);
            DBFAddField(_tmpDBF.hh_dbf,'GROUP', dbChar, 255 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'MIN', DbNum, 9, 3);
            DBFAddField(_tmpDBF.hh_dbf,'MAX', DbNum, 9, 3);
            DBFAddField(_tmpDBF.hh_dbf,'REMMC', dbChar, 50, 0);
            DBFAddField(_tmpDBF.hh_dbf,'NREC', dbNum, 19 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'ZAKUP', DbNum, 9, 3);
            DBFAddField(_tmpDBF.hh_dbf,'PLANVOL', DbNum, 9, 3);
            DBFAddField(_tmpDBF.hh_dbf,'TNVED', DbChar, 20 ,0);
            DBFAddField(_tmpDBF.hh_dbf,'OKDP', DbChar, 20 ,0);
          }
       result := _tmpDBF.hh_dbf;
     } else
     {
       result := _tmpDBF.hh_dbf;
     }
}

//Аналог штатного cmDefault, но как функция с параметрами
// _mode 111 - офлайн обмен с выгрузкой в dbf
// _mode 222 - онлайн обмен с выгрузкой через процедуру SQL
function _cmDefault_A208(_mode:word) : boolean;
{
  result := false;

  ReSetBounds(#Pick);
  if GetFirst Pick where ((word(555) == Pick.wList)) <> tsOk
   {

    SetKol_4TorgZal(rzKutPrih.ostatok);
    ReReadRecord(#rzKutPrih);

    ClearBuffer(#Pick);
    Pick.wList := 555;
    set Pick.cRec := rzKutPrih.nRec;
    if Insert current Pick <> tsOK
     Message('Ошибка при вставке в таблицу Pick', Warning);
   }

  SetBounds(#Pick);

  if Message('Передать в торговый зал?', Confirmation + YesNo) = cmYes
   {
    if Getfirst KatKassa where ((True == KatKassa.DefaultKas)) <> tsOk
     {
      Message(''#3'В настройке кассовых аппаратов не установлен'#13+
              ''#3'кассовый аппарат по умолчанию',Information);
      Abort;
      Exit;
     }
    FirstRec := True;
    result := _DoOperation_A208(_mode);
   }

  if not isValid(#rzKutPrih)
   CloseInterface(cmCancel);

  SetBounds(#rzKutPrih);
  ReReadRecord(#rzKutPrih);
}

//аналог штатного DoOperation (передача товара в ТЗ), но с параметром из _cmDefault_A208
// _mode 111 - офлайн обмен с выгрузкой в dbf
// _mode 222 - онлайн обмен с выгрузкой через процедуру SQL
function _DoOperation_A208(_mode:word) : boolean;
{
  result := false;

  var _DT_START : _DateTime = _CurDateTime;
  var _ProcName : string = '';

  delete all _tmpDBF_Del;
  delete all _tmpErr_Del;
  delete all _tmpReport_Del;
  delete all _tmpReportDoc_Del;
  delete all _tmpJSON;


  var SRV_NAME :string(255) = '';
  var DB_NAME  :string(255) = '';

  var wasOp   : boolean;
  var isFind  : word;
  SummaResume := 0;
  wasOp:= false;

  if (Getfirst KatKassa where ((True == KatKassa.DefaultKas)) <> tsOk)
     {
       Message('В каталоге кассовых аппаратов не определена касса по умолчанию',CancelButton);
       exit;
     }

//%%%%%%
  ReSetBounds(#rzKutPrih);

  var noUniq: boolean;
  noUniq:= ( ((KatKassa.KassaType and 255) = extTusson2) AND
               KatKassa.Options = 1 ); // не уникальность штрих-кодов для Туссон

  StartNewVisual(vtRotateVisual, vfTimer, 'Передача товара в торговый зал', 1);
  ReReadRecord(#Pick_Del);
  var _npp:longint=0;
  _LOOP Pick_Del where(( 555 == Pick_Del.wList ))
  {
    var bNalog:word = 0;
    _npp++;
    _try
    {
    var TransResult :integer;
    TransResult := BeginConcurrentTransaction(trNoLock);

    if not NextVisual
      Break;

    if GetFirst rzKutPrih where((Pick_Del.cRec == rzKutPrih.NRec)) != tsOk
       {
         Continue;
       } else
       {
         SetVisualHeader('Передача товара в торговый зал'+ chr(13) +
                         KatMC.Name + chr(13) +
                         'Всего обработано позиций: '+_npp
                        ) ;
       }

    //---------------------------------------------
    SetKol_4TorgZal(rzKutPrih.ostatok);
    AttrValP.vDouble := doGetAttr(coRzKutPrih, RzKutPrih.nRec,'Количество для ТЗ');
    if AttrValP.vDouble < GetPresision_forKol
      Continue;
    if AttrValP.vDouble > rzKutPrih.ostatok
      {
        AttrValP.vDouble:= rzKutPrih.ostatok;
        doSetAttr(coRzKutPrih, RzKutPrih.nRec,'Количество для ТЗ', AttrValP.vDouble);
      }
    //---------------------------------------------
    case ((KatKassa.KassaType and word(65280)) shr 8) of
      //---------------------------------------------
      wayPRICE:
        isFind := getfirst ListGood where
        ((
           rzKutPrih.barCode == ListGood.barCode and
            (rzKutPrih.cOtpEd = ListGood.cOtpEd  and
             rzKutPrih.cPodr  = ListGood.cPodr   and
             rzKutPrih.cMol   = ListGood.cMol    and
             rzKutPrih.pPrice = ListGood.Price)
        ));
      //---------------------------------------------
      wayMOL:
        isFind := getfirst ListGood where
        ((
           rzKutPrih.barCode == ListGood.barCode and
            (rzKutPrih.cOtpEd = ListGood.cOtpEd  and
             rzKutPrih.cPodr  = ListGood.cPodr   and
             rzKutPrih.cMol   = ListGood.cMol)
        ));
      //---------------------------------------------
      wayPODR:
      {
        if not noUniq //
          {
            isFind := getfirst ListGood where
            ((
               rzKutPrih.barCode == ListGood.barCode and
                (rzKutPrih.cOtpEd = ListGood.cOtpEd  and
                 rzKutPrih.cPodr  = ListGood.cPodr
                )
            ));
          }
        else // noUniq = true
          {
            isFind := getfirst ListGood where
            ((
               rzKutPrih.barCode == ListGood.barCode and
                (rzKutPrih.cOtpEd = ListGood.cOtpEd  and
                 rzKutPrih.cPodr  = ListGood.cPodr   and
                 rzKutPrih.cMC    = ListGood.cMC     and
                 abs(rzKutPrih.pPrice - ListGood.Price) < 0.01
                )
            ));
          }

      }
      //---------------------------------------------
      wayOTPED:
        isFind := getfirst ListGood where
        ((
           rzKutPrih.barCode == ListGood.barCode and
            (rzKutPrih.cOtpEd = ListGood.cOtpEd)
        ));
      //---------------------------------------------
      else //wayMC:
      {
        isFind := getfirst ListGood where
        ((
          rzKutPrih.barCode == ListGood.barCode
        ));
      }
    end;


//=== Проверка на ошибки и формирование протокола ошибок =====================================================

// Отсекаем подразделения розничной торговли, которые на самом деле не Торговые Залы
// Там зачем то хранятся остатки,  я до конца не понял
// Но передавать из них товары нельзя! KatPodr.SkPrior = 0  передаем только <> 0
    if KatPodr.SkPrior = 0
       {
         var _Err:string = 'Из этого подразделения запрещена передача товаров в ТЗ (Приоритет = 0)';
         if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
         continue;
       }
// проверка валидности ссылки на KatMC
    if NOT isValid(tnKatMC)
       {
         var _Err:string = 'Нарушена ссылочная целостность с каталогом МЦ';
         if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
         continue;
       }
// проверка группы налогов
//@@@###
    if not isValid(#GrNal)
       {
         var _Err:string = 'Не установлена группа налогов';
         if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
         continue;
       } else  bNalog := if(GrNal.Kod = '20',1,0);  // 1-товар с НДС/ 0-товар без НДС

// проверка валидности ссылки на GroupMC
    if NOT isValid(tnGroupMC)
       {
         var _Err:string = 'Нарушена ссылочная целостность с группой МЦ (производитель)';
         if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
         continue;
       }
// проверка валидности ссылки на KatOrg
    if NOT isValid(tnKatOrg)
       {
         var _Err:string = 'Нарушена ссылочная целостность с каталогом контрагентов';
         if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
         continue;
       }
//----- Выгружаем только в НЕДЕЛИМЫХ МИНИМАЛЬНЫХ ОТП.ЕД.
    if KatOtpEdMin.Diskret <> 1
       {
         var _Err:string = 'Допускается передача товаров только в НЕДЕЛИМЫХ МИНИМАЛЬНЫХ ОТП.ЕД.';
         if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
         continue;
       }
// проверка наличия отпускных единиц
    if NOT isValid(tnKatOtpEdMin)
       {
         var _Err:string = 'Не заданы отпускные единицы';
         if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
         continue;
       }


// позиционируем курсор на нужную кассу, для определения настроек обмена данными с этой кассой
// если настройки нет - генерируем запись, для этого товара, в таблице протокола ошибок и переходим к следующей записи
    if GetFirst KatKassa where ((rzKutPrih.cPodr == KatKassa.cPodr (noIndex) )) <> tsOk
        {
          var _Err:string = 'Отсутствует настройка обмена для заданного подразделения розничной торговли';
          if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
          continue;
        } else
        {
// во временную таблицу регистрации обмена данными записывается состояние linked сервера
// с которым выполняется обмен. Как только в первый раз сервер вернул ошибку
// весь дальнейший сеанс обмена данными с этим сервером считается проваленным
// так сделано для того, чтобы при потери связи не ожидать ответа от удаленного сервера по каждой МЦ
          if GetFirst _tmpDBF where ((KatKassa.nKassa == _tmpDBF.nKassa and 222 == _tmpDBF.mode (noIndex)  )) = tsOk
             {
               if _tmpDBF.SRV_Status = false
                  {
                    AbortTransaction;
                    var _Err:string = 'Хранимая процедура вернула ошибку: ' + _tmpDBF.SP_Err;
                    if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
                    continue;
                  }
             }
          SRV_NAME := '';
          DB_NAME  := '';
// проверяем, если это передача через SQL, то смотрим, чтобы была заполнен сервер и база данных в
// в "Настройках обмена данными с кассами" поле KATKASSA.ADDINFO (Дополнительная информация)
// при этом формат такой: ИмяСервера<ИмяБД> или ИмяСервера\Инстанс<ИмяБД>
          if _mode = 222
             {
// проверим что поле не пустое
// иначе генерируем ошибку и пропускаем позицию
               if KATKASSA.ADDINFO = ''
                  {
                    var _Err:string = 'В настройке обмена не задан Сервер и БД торгового зала (поле Дополнительная информация, формат ИмяСервера<ИмяБД> или ИмяСервера\Инстанс<ИмяБД> )';
                    if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
                    continue;
                  } else
                  {
                    if inStr('<', KATKASSA.ADDINFO) = 0 or inStr('>', KATKASSA.ADDINFO) = 0
                       {
                         var _Err:string = 'Не удалось определить имя Базы Данных (заполняется в поле Дополнительная информация по шаблону ИмяСервера<ИмяБД> или ИмяСервера\Инстанс<ИмяБД>)';
                         if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
                         continue;
                       } else
                       {
                         SET SRV_NAME := SubStr(KATKASSA.ADDINFO,1,inStr('<',KATKASSA.ADDINFO)-1);
                         SET DB_NAME  := Replace(Replace(Replace(KATKASSA.ADDINFO,SRV_NAME,''),'<',''),'>','');
//                         message('SRV_NAME: '+ SRV_NAME + ' ### '+ 'DB_NAME: '+ DB_NAME);
                         if (SRV_NAME = '') or (DB_NAME = '')
                            {
                              var _Err:string = 'Не удалось определить Сервер или имя Базы Данных (заполняется в поле Дополнительная информация по шаблону ИмяСервера<ИмяБД> или ИмяСервера\Инстанс<ИмяБД>)';
                              if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
                              continue;
                            }
                       }
                  }
             }
        }
//============================================================================================================

    if isFind = tsOk   // проверка только для розницы на наличие в ListGood
    {

      if ListGood.cMC <> rzKutPrih.cMC
        {
          message('Товар "' + KatMC.Name + '" со штрих-кодом '+rzKutPrih.barCode+''#13+
                  'не передан в торговый зал - в торговом зале имеется иной товар с таким же штрих-кодом: ' + ListGood.barCode, Warning);
          Continue;
        }

      if abs(ListGood.Price - rzKutPrih.pPrice) >= 0.01
        {
          message('Товар "' + KatMC.Name + '" со штрих-кодом '+rzKutPrih.barCode+''#13+
                  'не передан в торговый зал - в торговом зале имеется этот же товар с иной ценой: ' + string(ListGood.price), Warning);
          Continue;
        }

      var GoodsOtpEd, PrihOtpEd : double;
      PrihOtpEd  := 1;
      GoodsOtpEd := 1;

      if ListGood.cOtpEd <> rzKutPrih.cOtpEd
        {
          if( isValid(#KatOtpEd) )
            PrihOtpEd := KatOtpEd.Koef;

          PushPos(#KatOtpEd);
          ResetBounds(#KatOtpEd);

          if( getfirst KatOtpEd where((ListGood.cOtpEd == KatOtpEd.NRec)) = tsOk )
            GoodsOtpEd := KatOtpEd.Koef;

          SetBounds(#KatOtpEd);
          PopPos(#KatOtpEd);
        }

      ListGood.Kol := ListGood.Kol + AttrValP.vDouble * PrihOtpEd / GoodsOtpEd;

//@@@#### перекрываем поля для отпускных единиц КВ
      if isValid(tnKatOtpEdMin) = true
      {
        ListGood.Kol := ListGood.Kol + OEdKol_2 * PrihOtpEd / GoodsOtpEd;
      }


      if UpDate current ListGood <> tsOK
         Message('Ошибка при обновлении записи в таблице ListGood', Warning);

      //---------------------------------------------
      if GetFirst KolMC where (( ListGood.nRec == KolMC.cGoods)) <>tsOk
        {
          ClearBuffer(#KolMC);
          KolMC.cGoods  := ListGood.nRec;
          KolMC.cKassa  := 0;

          //Это поле обнуляется при вырузки файлов в кассу,
          //поскольку у нас передача в ТЗ не может быть выполнена без ответа сервера ТЗ
          //то сразу обнуляем поле KolMC.KolStart
          KolMC.KolStart:= 0; //AttrValP.vDouble; // для передачи в кассы

          KolMC.KolSub  := 0; //продано
          KolMC.KolAdd  := 0;
          KolMC.Kol     := 0;

//@@@#### перекрываем поля для отпускных единиц КВ
          if isValid(tnKatOtpEdMin) = true
          {
            KolMC.KolStart := 0 //OEdKol_2;
          }

          insert current KolMC;
        }
      else
        {
          KolMC.KolStart:= 0;//KolMC.KolStart + AttrValP.vDouble; // для передачи в кассы

//@@@#### перекрываем поля для отпускных единиц КВ
          if isValid(tnKatOtpEdMin) = true
          {
            KolMC.KolStart:= 0; //KolMC.KolStart + OEdKol_2;
          }

          update current KolMC;
        }
    }
    else   // вставка записи - так как не найдено было в торговом зале
    {
      ClearBuffer(#ListGood);
      ListGood.NRec     := 0;
      ListGood.cPodr    := rzKutPrih.cPodr  ;
      ListGood.cMol     := rzKutPrih.cMol   ;
      ListGood.cSpPropusk := rzKutPrih.cOrg ; // поставщик

      //пересчет в валюту кассы
      if rzKutPrih.cValut <> KatKassa.cPrice
       {
        Message('Производим пересчет в ' + ValSet +
                ' по курсу ' + DoubleToStr(GetCursVal(Cur_Date, KatKassa.cPrice),
                                          '\2p[|-]3666`666`666`666.88')+
                ' ' + SimRu, Information);

        ListGood.Price  := rzKutPrih.pPrice *
                           GetCursVal(rzKutPrih.dDoc, rzKutPrih.cValut) /
                           GetCursVal(Cur_Date, KatKassa.cPrice);
       }
      else
      ListGood.Price    := rzKutPrih.pPrice;


      ListGood.cMc      := rzKutPrih.cMc    ;

      ListGood.cOtpEd   := rzKutPrih.cOtpEd ;
      ListGood.Kol      := AttrValP.vDouble ;
      ListGood.NameEd   := WordNameEd       ;
      ListGood.c1       := rzKutPrih.nRec   ;

      if rzKutPrih.cOtpEd = 0
      {
        ListGood.Diskret  := KatEd.Diskret;
      }
      else
      {
        ListGood.Diskret  := KatOtpEd.Diskret;
      }

//@@@#### перекрываем поля для отпускных единиц КВ
      if isValid(tnKatOtpEdMin) = true
      {
        ListGood.Diskret  := KatOtpEdMin.Diskret;
        ListGood.cOtpEd   := KatOtpEdMin.nRec;
        ListGood.Kol      := OEdKol_2;
        ListGood.Price    := round(OEdRPrice,2);
        ListGood.NameEd   := KatOtpEdMin.Abbr;
      }


      ListGood.BarCode  := rzKutPrih.BarCode;
      ListGood.NameGoods:= KatMc.Name       ;
      ListGood.NNumber  := KatMc.BarKod     ;

      if Insert current ListGood <> tsOK
         {
           Message('Ошибка при вставке в таблицу ListGood', Warning);
         }
      //---------------------------------------------
      ClearBuffer(#KolMC);
      KolMC.cGoods  := ListGood.nRec;
      KolMC.cKassa  := 0;
      KolMC.KolStart:= 0; //ListGood.kol; // для передачи в кассы
      KolMC.KolSub  := 0; //продано
      KolMC.KolAdd  := 0;
      KolMC.Kol     := 0;
      insert current KolMC;

    }// для добавления ListGood

    ClearBuffer(#rzKUTRASH);
    rzKUTRASH.NRec     := 0;
    rzKUTRASH.dDoc       := Cur_Date;
    rzKUTRASH.cOrg       := rzKutPrih.cOrg; // 0 было, пойдет ли ?
    rzKUTRASH.TypeRash   := TO_KASSA;
    rzKUTRASH.Kol        := AttrValP.vDouble;
    rzKUTRASH.cOtpEd     := rzKutPrih.cOtpEd;
    rzKUTRASH.Price      := rzKutPrih.pPrice;
    rzKUTRASH.VPrice     := rzKutPrih.VPrice;
    rzKUTRASH.cVal       := rzKutPrih.cVal;
    rzKUTRASH.cMc        := rzKutPrih.cMc;
    rzKUTRASH.cPodr      := rzKutPrih.cPodr;
    rzKUTRASH.cMol       := rzKutPrih.cMol ;
    rzKUTRASH.crzPrih    := rzKutPrih.NRec;
    rzKUTRASH.cGoods     := ListGood.NRec;

//@@@#### перекрываем поля для отпускных единиц КВ
      if isValid(tnKatOtpEdMin) = true
      {
        rzKUTRASH.cOtpEd  := KatOtpEdMin.nRec;
        rzKUTRASH.Kol     := OEdKol_2;
        rzKUTRASH.Price   := OEdRPrice;
        rzKUTRASH.VPrice  := OEdRPrice;
      }

    if insert_Rash <> tsOK
       {
         Message('Ошибка при вставке в таблицу rzKutRash', Warning)
       }

    // формирование штрих-кода для КУТ и ListGood
    if rzKutPrih.barCode=''
     {
       var s_: string;
       s_:= string(rzKutPrih.nRec);

       if length(s_) > 11
         s_:= substr(s_, length(s_)-10 ,11); // берем строку с конца и длиной 11 символов

       var i: word;
       for(i:= length(s_); i < 11; i:= i+1) // если строка короткая, то дополняем до 11 знаков нулями спереди
         {
           s_:= '0' + s_;
         }

       rzKutPrih.barCode:= '2'+ s_;
       rzKutPrih.barCode:= rzKutPrih.barCode+ set13(rzKutPrih.barCode);

       ListGood.barCode := rzKutPrih.barCode;
       update current ListGood;
     }

    rzKutPrih.Ostatok := rzKutPrih.Ostatok - AttrValP.vDouble;

//@@@#### перекрываем поля для отпускных единиц КВ
    if isValid(tnKatOtpEdMin) = true
    {
//      rzKutPrih.Ostatok := rzKutPrih.Ostatok - OEdKol_2;
    }


    if abs(rzKutPrih.Ostatok) < GetPresision_forKol
      rzKutPrih.Ostatok := 0;

    if update_Prih <> tsOK
     Message('Ошибка при обновлении записи в таблице rzKutPrih', Warning);

    doSetAttr(coRzKutPrih, RzKutPrih.nRec,'Количество для ТЗ', double(0));

//----- Проверить значение внешнего аттрибута: Артикул
    if not isValid(#AttrVal)
    {  ClearBuffer(#AttrVal);
       AttrVal.cRec     := KatMC.nRec
       AttrVal.cAttrNam := AttrNam.nRec;
       AttrVal.wTable   := 1411;
       AttrVal.vString  := RZKUTPRIH.BARCODE;
       insert current AttrVal;
    }  else
    {  AttrVal.vString  := RZKUTPRIH.BARCODE;
       update current AttrVal;
    }
//----- Проверить значение внешнего аттрибута: Наименование для чека
    if not isValid(#AttrValN)
    {  ClearBuffer(#AttrValN);
       AttrValN.cRec     := KatMC.nRec
       AttrValN.cAttrNam := AttrNamN.nRec;
       AttrValN.wTable   := 1411;
       AttrValN.vString  := UpCase(SubStr(KatMc.Name,1,14));
       insert current AttrValN;
    }  else
    {  if AttrValN.vString = ''
          AttrValN.vString := UpCase(SubStr(KatMc.Name,1,14));
       update current AttrValN;
    }

// заполнение временной таблицы для отчета "Отчет о передаче в ЕККА"
    Insert_for_Report_EKKA(ListGood.barCode);


// формирование файла для передачи данных в кассу при офлайн обмене
    if _mode = 111
       {
//для обмена через DBF  ======================================================================================
         var hh : longint =_GetDBF_hh(KatKassa.nKassa);
         if hh <> 0
            {
              if _FormatExch = 0 {
              DBFPutFieldValue(hh,'LOC'      , RZKUTPRIH.BARCODE);
              DBFPutFieldValue(hh,'GALLOCAL' , ListGood.cMc);
              DBFPutFieldValue(hh,'BARKOD'   , ListGood.BARCODE);
              DBFPutFieldValue(hh,'COUNT'    , rzKUTRASH.Kol);
              DBFPutFieldValue(hh,'NAM'      , KatMC.Name);
              DBFPutFieldValue(hh,'VES'      , ListGood.Diskret);
              DBFPutFieldValue(hh,'ED'       , WordNameEd);
              DBFPutFieldValue(hh,'EDMSG'    , GetOtpEdStr);
              DBFPutFieldValue(hh,'DEP'      , bNalog);
              DBFPutFieldValue(hh,'KOEF'     , OEKoefDel);  //OEKoefDel
              DBFPutFieldValue(hh,'SALE'     , KatMC.Sale);
              DBFPutFieldValue(hh,'FPRICE'   , ListGood.Price);
              DBFPutFieldValue(hh,'GROUP'    , GroupMC.Name);
              DBFPutFieldValue(hh,'MIN'      , KatMC.ZapasMin);
              DBFPutFieldValue(hh,'MAX'      , KatMC.ZapasMax);
              DBFPutFieldValue(hh,'REMMC'    , KatMC.REMMC);
              DBFPutFieldValue(hh,'NREC'     , KatMC.nRec);
              DBFPutFieldValue(hh,'ZAKUP'    , KatMC.PRICEPU);  // было KatMC.Volume - Замена поля в новой Галактике
              DBFPutFieldValue(hh,'PLANVOL'  , KatMC.maxorn);
              DBFPutFieldValue(hh,'TNVED'    , KatMC.TnVed);
              DBFPutFieldValue(hh,'OKDP'     , KatMC.OkDP);

              DBFInsertRecord(hh);
              }
            }
//============================================================================================================
// заполняем временную таблицу для обмена JSON
         ClearBuffer(#_tmpJSON);
         _tmpJSON.LOC        := RZKUTPRIH.BARCODE;
         _tmpJSON.GALLOCAL   := ListGood.cMc;
         _tmpJSON.BARKOD     := ListGood.BARCODE;
         _tmpJSON.PRICE      := ListGood.Price;
         _tmpJSON.COUNT      := rzKUTRASH.Kol;
         _tmpJSON.NAM        := KatMC.Name;
         _tmpJSON.VES        := ListGood.Diskret;
         _tmpJSON.ED         := WordNameEd;
         _tmpJSON.EDMSG      := GetOtpEdStr;
         _tmpJSON.DEP        := bNalog;
         _tmpJSON.KOEF       := OEKoefDel  //OEKo
         _tmpJSON.SALE       := KatMC.Sale;
         _tmpJSON.FPRICE     := KatMC.CenaMC;
         _tmpJSON.GROUP      := GroupMC.Name;
         _tmpJSON.MIN        := KatMC.ZapasMin;
         _tmpJSON.MAX        := KatMC.ZapasMax;
         _tmpJSON.REMMC      := KatMC.REMMC;
         _tmpJSON.NREC       := KatMC.nRec;
         _tmpJSON.ZAKUP      := KatMC.PRICEPU;  //
         _tmpJSON.PLANVOL    := KatMC.maxorn;
         _tmpJSON.TNVED      := KatMC.TnVed;
         _tmpJSON.OKDP       := KatMC.OkDP;
         _tmpJSON.nKassa     := KatKassa.nKassa;
         insert current _tmpJSON;
//============================================================================================================
         wasOp:= true;
       }

    SET Pick_Del.PICKKOL := rzKUTRASH.Kol;
    Update current Pick_Del;
// вызов хранимой процедуры SQL (в БД Галактики) для передачи данных при онлайн обмене
    if _mode = 222
       {
         var qq: IQuery;
         qq := queryManager.createQuery(sql_Exec_SendTovar_To_TorgZal);

         qq.setParam('ARTCODE' ,  RZKUTPRIH.BARCODE);           //@ARTCODE  VARCHAR(30),    --1 RZKUTPRIH.BARCODE
         qq.setParam('MNAME'   ,  GroupMC.Name);                //@MNAME  VARCHAR(255),     --2
         qq.setParam('PACK'    ,  OEKoefDel);                   //@PACK  FLOAT,             --3
         qq.setParam('PNAME'   ,  KatMC.Name);                  //@PNAME  VARCHAR(255),     --4
         qq.setParam('PUNU'    ,  KatOtpEdMin.abbr);            //@PUNU  VARCHAR(8),        --5
// ###@@@ тут пока непонятно что передавать!!!!
         qq.setParam('PTAX'    ,  string(bNalog));              //@PTAX  VARCHAR(2),        --6
         qq.setParam('PNREC'   ,  string(KatMC.nRec));          //@PNREC  VARCHAR(30),      --7
// ###@@@ обратить внимание, что в галактике мы передаем дробное число, а в их хранимке целое число
         qq.setParam('MIN_K'   ,  KatMC.ZapasMin);              //@MIN_K  FLOAT,            --8
         qq.setParam('MAX_K'   ,  KatMC.ZapasMax);              //@MAX_K  FLOAT,            --9
         qq.setParam('REMMC'   ,  KatMC.RemMC);                 //@REMMC  VARCHAR(255),     --10
         qq.setParam('PRICE'   ,  ListGood.Price);              //@PRICE  FLOAT,            --11
         qq.setParam('QTY'     ,  0);                           //@QTY  INTEGER,            --12
         qq.setParam('QTYU'    ,  rzKUTRASH.Kol);               //@QTYU  FLOAT,             --13
         qq.setParam('KOEF'    ,  OEKoefDel);                   //@KOEF  FLOAT,             --14
         qq.setParam('OKDP'    ,  KatMC.OKDP);                  //@OKDP  VARCHAR(50),       --15
         qq.setParam('TNVED'   ,  KatMC.TNVED);                 //@TNVED  VARCHAR(50),      --16
         qq.setParam('SRV_NAME',  SRV_NAME);                    //@SRV_NAME  VARCHAR(255),  --17
         qq.setParam('DB_NAME' ,  DB_NAME);                     //@DB_NAME  VARCHAR(255)    --18
         qq.setParam('MODE'    ,  1    );                       //@MODE  TINYINT            --19

         var _errorCode:integer = qq.errorCode;
         var iRes : IResultSet = qq.getResultSet;

         if _errorCode <> 0
            {
              AbortTransaction;
              var _Err:string = 'Хранимая процедура вернула ошибку: ' + _errorCode;
              if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
// Помечаем сервер как не отвечающий
              _SetSrvStatus(false, _errorCode);
              continue;
            } else
            {
              _SetSrvStatus(true, _errorCode);
              if iRes.getFirst = tsOk and iRes.row.val('ReturnValue') = 0
                 {
                   if iRes.row.val('ReturnValue') = 0
                      {
                        wasOp:= true;
                      } else
                      {
                        AbortTransaction;
                        var _Err:string = 'Хранимая процедура вернула ошибку: ' + iRes.row.val('EXECRESULT') +' LinkedTRN: '+ (iRes.row.val('ReturnValue'));
                        if NOT _MakeErrProtocol('',_Err) message('Ошибка формирования протокола ошибок');
                        continue;
                      }
                 }
            }
       } // if _mode = 222
    EndTransaction;
    } // end _try
    _except on ExDataBase:  AbortTransaction;

  }//_LOOP  Pick = 555

  StopVisual('', 0);

  var fileName_prnBar :string;
  RunInterface('L_Kassa::iATC_PrintBar', 3, fileName_prnBar);
//  delete Pick_Del where (( 555 == Pick_Del.wList ));
  delete all Pick_Del;

  SetBounds(#rzKutPrih);
  ReReadRecord(#rzKutPrih);
  ReReadRecord(#rzKutPrih);

  var _status :word;
  if wasOp
     {
       _loop _tmpDBF
       {
         if _FormatExch = 0 DBFClose(_tmpDBF.hh_dbf);
       }
       if _FormatExch = 1
          {
             if ExportJSON {};
          }
       if GetFirst _tmpErr <> tsOk
          {
//          все ок
            _status := 0;
          } else
          {
//          частично
            _status := 65000;
          }
     } else
     {
//     ничего не передано
       _status := 65111;
     }


// формирование отчета
  var _rep_Path : string = GetStringParameter('Files', 'OutputFilesDirectory', 0);
  _rep_Path := _rep_Path  +'\1_Отчет о передаче товара на ЕККА (с Протоколом)'+ '_' + DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS') + '.xlsx';
  _rep_Path := replace(_rep_Path,'\\','\');
  var _fr :boolean = false;
  var FReport: TPtr =  FrCreate(StreamReport);
  if FReport <> 0
     {
       if FROpenReport(FReport,'1_Отчет о передаче товара на ЕККА (с Протоколом)')
          {
            if FRSetParameters(FReport, frExportXLSX, 'OpenAfterExport=false')
               {
                 if FRExportReport(FReport, frExportXLSX, _rep_Path)
                    {
                      _fr := true;
                    }
               }
          }
     } else
     {
       _fr := false;
       message('Отчеты FastReport не найдены');
     }

// Заполнение лога
  if _mode = 111 _ProcName := 'Передача товара в ТЗ (обмен файлами)'
  if _mode = 222 _ProcName := 'Передача товара в ТЗ (SQL SendTovar_To_TorgZal)'

  ClearBuffer(#ATC_exch_log);
  ATC_exch_log.log_type  := 2; //выгрузка (экспорт)
  ATC_exch_log.Dt_Start  := _DT_START;
  ATC_exch_log.Dt_End    := _CurDateTime;
  ATC_exch_log.UserName  := UserName();
  ATC_exch_log.ProcName  := _ProcName;
  ATC_exch_log.status    := _status;
  if _fr
     {
       ImportFileToMemoAZM(ATC_exch_log.SMEMO,_rep_Path,true);
     }
  insert current ATC_exch_log;

  //добавление этикеток в мемо поле
  if ExistFile(fileName_prnBar)
     {
       ImportFileToMemoAZM(ATC_exch_log.SMEMO,fileName_prnBar,true);
       update current ATC_exch_log;
       DeleteFile(fileName_prnBar);
     }

  if DeleteFile(_rep_Path) {};

  if _status = 0      message('Передача товара в торговый зал произведена успешно', information);
  if _status = 65000  message('Произведена частичная передача товара в торговый зал, по некоторым товарам передача НЕ ВЫПОЛНЕНА. Сформирован ПРОТОКОЛ!', information);
  if _status = 65111  message('Передача товара в торговый НЕ ПРОИЗВЕДЕНА. Сформирован ПРОТОКОЛ!');

  RunFReport(StreamReport, '', true);

}

//для сортировки по подразделению по умолчанию
var i, j: longInt
var f: array[0..0] of longInt
var m: array[0..0] of integer

HandleEvent
cmPlansNo:{
  if GetFirst Pick_Del where ((555 == Pick_Del.wList)) <> tsOk
     {
       ClearBuffer(#Pick_Del);
       Pick_Del.wList := word(555);
       Pick_Del.cRec  := rzKutPrih.nRec;
       insert current Pick_Del;
     }
  RunInterface('L_Kassa::iATC_PrintBar', 1, '');
  delete Pick_Del where ((word(555) == Pick_Del.wList));
  RescanPanel(#rzKutPrih);

}

/*
cmLinkedTest:{
  var sql_result :integer;
  var stmt :longint;
  var rc, ResultTran :integer;
  stmt := SqlAllocStmt;
  SqlBindParam(stmt, 1, 'test 111');
  sqlBindCol(stmt, 1, rc);
  sqlBindCol(stmt, 2, ResultTran);

  sql_result := SqlExecStmt(stmt, 'Linked_test(?)');

  if (sql_result <> tsOk)
     {
       message(':-( ');
     } else
     {
       while sqlFetch(stmt) = tsOk do
       {
         message(':-)   ' + 'rc = ' + rc +'   ResultTran = '+ ResultTran );
       }
     }
}
*/
cmInit:{
  if (Inherited::HandleEvent(cmInit) = heOk)
     {
       _FormatExch := wGetTune('GALCOMMON.PARTNER2.a208PosTermExch.PosTermOffline');
       delete all Pick_Del;
///////Спрячем стандартную кнопку "Передать_товар_в_Торговый_зал"
       cfsSetProp('b_BEFORESUMMER_Передать_товар_в_Торговый_зал', cfpVisible, false);
//---- Найти прайс-лист "Розн торговля (Цены для POS-терминалов)"
       if getfirst KlPricePOS where ((NamePLPos == KlPricePOS.Name))=tsOk
          {
            nRecPLPos := KlPricePOS.nRec;
          }
       _ReDraw;
/*
//для сортировки по подразделению по умолчанию
       i := 1;
       SetLimit(f, i);
       f[0] := #KatPodr.Name;
       SetLimit(m, i);
       m[0] := 1
       if SetBrowseSortFields(GetMBPOutWhereOn, f, m) {};//message('ура') else message('не ура');
*/
       ReadMyDsk(_cPodrFlt, 'RestInKa__cPodrFlt', true);
       SET ByPodr := _cPodrFlt;
       if (ByPodr <> 0) AddBounds(tbByPodrBound);
     }
  if GetFirst rzKutPrih = tsOk {};
  RescanPanel(#rzKutPrih);
}

cmPick:{
  PutCommand(cmUnSelectAll);
  if (Inherited::HandleEvent(cmPick) = heOk)
     {
       if curField = #KatPodr_FLT.Name
          {
             if RunInterface('Z_KATPODR::GetAnyPodr', _cPodrFlt, 2) <> cmCancel
                {
                  SaveMyDsk(_cPodrFlt, 'KUT2KASSA__cPodrFlt');
                  SET ByPodr := _cPodrFlt;
                  if (ByPodr <> 0)
                     {
                       if NOT BoundActive(tbByPodrBound) AddBounds(tbByPodrBound);
                     } else SubBounds(tbByPodrBound);
                  ReReadRecord(#rzKutPrih);
                }
          }
     }

}

cmOk2:{
  if (RunWindowModal(winParamOb)<>cmDefault)
     {
       abort; Exit;
     }
  var _mode :word = if(_modeOb = 0,word(222),word(111));
  _cmDefault_A208(_mode);
}


cmDefault:{
//Поскольку у нас свои кнопки, перекрываем событие по cmDefault
  Stop;
  PutCommand(cmOk2);
}

// На случай если конфигуратором вернут видимость штатной кнопке
// переносим реакцию на событие из cmDefault в cmOk
// на всякий случай, чтобы было )
cmOk:{
  ReSetBounds(#Pick);
  if GetFirst Pick where ((word(555) == Pick.wList)) <> tsOk
   {

    SetKol_4TorgZal(rzKutPrih.ostatok);
    ReReadRecord(#rzKutPrih);

    ClearBuffer(#Pick);
    Pick.wList := 555;
    set Pick.cRec := rzKutPrih.nRec;
    if Insert current Pick <> tsOK
     Message('Ошибка при вставке в таблицу Pick', Warning);
   }

  SetBounds(#Pick);

  if Message('Передать в торговый зал?', Confirmation + YesNo) = cmYes
   {
    if Getfirst KatKassa where ((True == KatKassa.DefaultKas)) <> tsOk
     {
      Message(''#3'В настройке кассовых аппаратов не установлен'#13+
              ''#3'кассовый аппарат по умолчанию',Information);
      Abort;
      Exit;
     }
    // только для xCell
    if (KatKassa.KassaType and 255) = extECell
     {
      var NeedExit : boolean;

      NeedExit := False;
      _try
        OnlineECell.OpenFile(KatKassa.LocationOut + '\online',stOpen);
      _except
        on ExFileSharingViolation :
         if FFFile(KatKassa.LocationOut + '\item.txt') = 'item.txt'
          {
           Message(''#3'Касса "' + KatKassa.nKassa + '" находится в режиме OnLine'#13+
                   ''#3'Запрещено производить выгрузку ' + KatKassa.LocationOut + '\item.txt',Information);
           NeedExit := True;
          }
      _finally
        OnlineECell.Close;

      if NeedExit
       {
        Abort;
        Exit;
       }
     }

    FirstRec := True;
    DoOperation;
   }

  if not isValid(#rzKutPrih)
   CloseInterface(cmCancel);

  SetBounds(#rzKutPrih);
  ReReadRecord(#rzKutPrih);
}

cmMarkUnMark:{
  if (Inherited::HandleEvent(cmMarkUnMark) = heOk)
     {
       _ReDraw;
     }
}

cmSelectAll:{
  if (Inherited::HandleEvent(cmSelectAll) = heOk)
     {
       _ReDraw;
     }
}

cmUnSelectAll:{
  if (Inherited::HandleEvent(cmUnSelectAll) = heOk)
     {
       _ReDraw;
     }
}
cmCheckField:{
  if (Inherited::HandleEvent(cmCheckField) = heOk)
     {
       _ReDraw;
     }
}
/*
cmCheckField:{
  case CurField of
    #AttrValP.vDouble:
      {
        if AttrValP.vDouble > rzKutPrih.ostatok
          {
            message('Нельзя передавать количество товара больше свободного остатка');
            set AttrValP.vDouble:= rzKutPrih.ostatok;
          }

        ExtAttr_Create(coRzKutPrih, 'Количество для ТЗ', cgAttrType_Dbl);
        doSetAttr(coRzKutPrih, RzKutPrih.nRec,'Количество для ТЗ', AttrValP.vDouble);
        RereadRecord(#AttrValP);
        message('ss');
        _ReDraw;
      }
  end;

}
*/
end;
end.
